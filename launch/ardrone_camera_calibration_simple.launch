<!--
    Launch with 
        roslaunch rescueranger ardrone_camera_calibration_simple.launch activeCamera:=front activeCamera:=0
    for front camera or 
        roslaunch rescueranger ardrone_camera_calibration_simple.launch activeCamera:=bottom activeCamera:=1
    for bottom camera


    Replace [dashdash] with two dashes.
#Calibrate frot camera
rosrun camera_calibration cameracalibrator.py [dashdash]pattern 'circles' [dashdash]size 6x6 [dashdash]square 0.02 image:=/ardrone/front/image_raw camera:=/ardrone/front

Calibrate bottom camera
rosrun camera_calibration cameracalibrator.py [dashdash]pattern 'circles' [dashdash]size 6x6 [dashdash]square 0.02 image:=/ardrone/bottom/image_raw camera:=/ardrone/bottom
  -->

<launch>	
  <arg name="droneip" default="192.168.1.1" />
  <arg name="activeCamera" default="front" />
  <arg name="activeCameraNr" default="0" />
  
  <node name="ardrone_driver" pkg="ardrone_autonomy" type="ardrone_driver" output="screen" args="-ip $(arg droneip)" launch-prefix="xterm -e" required="true">
    <param name="navdata_demo" value="False" />
    <param name="realtime_navdata" value="True" />
    <param name="realtime_video" value="True" />
    <param name="looprate" value="30" />
    <param name="video_channel" value="activeCameraNr" /> <!-- Select camera, 0 for front, 1 for bottom -->
  </node>
  
  <node name="cameracalibratorFront" pkg="camera_calibration" type="cameracalibrator.py" args="--pattern 'circles' --size 6x6 --square 0.02 image:=/ardrone/$(arg activeCamera)/image_raw camera:=/ardrone/$(arg activeCamera)" output="screen" launch-prefix="xterm -e">
  </node>
</launch>
